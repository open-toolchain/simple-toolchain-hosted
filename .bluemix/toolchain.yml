---
version: "2"
messages:
  $i18n: locales.yml
template:
  name:
    $ref: "#/messages/template.name"
  description:
    # original static description:
    # $ref: "#/messages/template.description"
    # template descriptions now vary depending on the flavor of source provider selected
    $ref: >
      $env.source_provider === 'githubconsolidated' ?
      '#/messages/template.description.github' : '#/messages/template.description'
  header: "![](toolchain.svg?localize)"
  icon: icon.svg
  required:
    - sample-build
    - sample-repo
  $configuration:
    ENABLE_EXTENSIONS: true
    ENABLE_IF_ELSE: true
    EXPRESSION_MAXLENGTH: 1000
  info:
    # original static git url and branch string definitions
    # git url: >-
    #  [https://github.com/open-toolchain/simple-toolchain-hosted](https://github.com/open-toolchain/simple-toolchain-hosted)
    # git branch: >-
    #  [master](https://github.com/open-toolchain/simple-toolchain-hosted/tree/master)

    # compute the git url and branch values dynamically so that they remain correct when repo is forked etc.
    # note: `repository` url param must always be provided while the `branch` url param is optional
    # the computed urls are of the same format as the original static urls shown above
    git url: >
      '[' + $env.repository + '](' + $env.repository + ')'
    git branch: >
      $env.branch ?
        '[' + $env.branch + ']('+ $env.repository + '/tree/' + $env.branch + ')' :
        '[master]('+ $env.repository + '/tree/master)'
toolchain:
  name: >
    $env.toolchainName ? '{{toolchainName}}' :
      'simple-toolchain-{{timestamp}}'
  template:
    getting_started:
      $ref: "#/messages/template.gettingStarted"
services:
  sample-repo:
    service_id: >
      $env.source_provider ? $env.source_provider : 'hostedgit'
    parameters:
      repo_name: '{{toolchain.name}}'
      repo_url: >
        $env.type === 'link' ? $env.app_repo :
          $env.sourceZipUrl ? '{{sourceZipUrl}}' :
            'https://github.com/open-toolchain/node-hello-world'
      source_repo_url: >
        $env.type === 'fork' || $env.type === 'clone' ? $env.app_repo :
          $env.sourceZipUrl ? '{{sourceZipUrl}}' : 'https://github.com/open-toolchain/node-hello-world'
      type: $env.type || 'clone'
      has_issues: true
      enable_traceability: true
      legal: true
  pipeline-repo:
    service_id: >
      $env.pipeline_type === 'tekton' ? $env.source_provider ? $env.source_provider : 'hostedgit' : ''
    parameters:
      repo_name: >
        $env.toolchainName ? '{{toolchainName}}-pipeline' : "simple-toolchain-hosted-{{timestamp}}"
      repo_url: >
        $env.repository
      source_repo_url: "https://github.com/open-toolchain/simple-toolchain-hosted"
      type: $env.type || 'clone'
      has_issues: false
      enable_traceability: false
      kind: ['pipeline']
  tekton-catalog-repo:
    service_id: >
      $env.pipeline_type === 'tekton' ? 'githubconsolidated' : ''
    parameters:
      repo_url: "https://github.com/open-toolchain/tekton-catalog"
      source_repo_url: "https://github.com/open-toolchain/tekton-catalog"
      type: "link"
      has_issues: false
      enable_traceability: false
      kind: ['pipeline']
  pr:
    service_id: >
      $env.pipeline_type === 'tekton' ? 'pipeline' : ''
    parameters:
      services:
        - sample-repo
        - tekton-catalog-repo
      name: 'pr-pipeline'
      type: >
        $env.pipeline_type === 'tekton' ? 'tekton': 'classic'
      ui-pipeline: true
      configuration:
        content:
          $text: >
            if ( $env.pipeline_type === 'tekton' ) {
              if ( $env.env_id === 'ibm:yp:us-south' ) {
                "south_pr_pipeline_tekton.yml"
              } else {
                "pr_pipeline_tekton.yml"
              }
            } else {
              "pipeline.yml"
            }
        env:
          SAMPLE_REPO: sample-repo
          API_KEY: '{{form.pipeline.parameters.api-key}}'
          APP_NAME: "{{form.pipeline.parameters.prod-app-name}}"
          ARTIFACTORY_DOCKER_CONFIG_JSON: '{{form.artifactoryComp.parameters.docker_config_json}}'
          PRIVATE_WORKER: '{{services.privateWorker.parameters.name}}'
          PIPELINE_REPO_BRANCH: >
            $env.branch ? $env.branch : "master"
          TEKTON_CATALOG_REPO: tekton-catalog-repo
          REGISTRY_REGION_ID: "{{form.pipeline.parameters.prod-region}}"
          GIT_COMMIT_EVENT_LISTENER_NAME: >
            if ( $env.source_provider === 'githubconsolidated' ) {
              'github-pr-listener';
            } else if ( $env.source_provider === 'gitlab' ) {
              'gitlab-pr-listener';
            } else if ( $env.source_provider === 'bitbucketgit' ) {
              'bitbucket-commit';
            } else if ( $env.source_provider === 'github_integrated' ) {
              'github-ent-pr-listener';
            } else {
              'gitlab-pr-listener';
            }
          PIPELINE_REPO: pipeline-repo
        execute: false
  sample-build:
    service_id: pipeline
    parameters:
      services:
        - sample-repo
      name: 'ci-pipeline'
      ui-pipeline: true
      type: >
        $env.pipeline_type === 'tekton' ? 'tekton': 'classic'
      configuration:
        content:
          $text: >
            if ( $env.pipeline_type === 'tekton' ) {
              if ( $env.env_id === 'ibm:yp:us-south' || $env.env_id === 'ibm:yp:au-syd') {
                "south_pipeline_tekton.yml"
              } else {
                "pipeline_tekton.yml"
              }
            } else {
              "pipeline.yml"
            }
        env:
          SAMPLE_REPO: sample-repo
          CF_APP_NAME: "{{form.pipeline.parameters.prod-app-name}}"
          PROD_SPACE_NAME: "{{form.pipeline.parameters.prod-space}}"
          PROD_ORG_NAME: "{{form.pipeline.parameters.prod-organization}}"
          PROD_REGION_ID: "{{form.pipeline.parameters.prod-region}}"
          API_KEY: "{{form.pipeline.parameters.api-key}}"
          SAMPLE_REPO_FULL: >
            if ( $env.source_provider === 'githubconsolidated' ) {
              "https://github.com/{{services.sample-repo.parameters.owner_id}}/{{services.sample-repo.parameters.repo_name}}";
            } else if ( $env.source_provider === 'gitlab' ) {
              "https://gitlab.com/{{services.sample-repo.parameters.owner_id}}/{{services.sample-repo.parameters.repo_name}}";
            } else if ( $env.source_provider === 'bitbucketgit' ) {
              "https://bitbucket.org/{{services.sample-repo.parameters.owner_id}}/{{services.sample-repo.parameters.repo_name}}";
            } else if ( $env.source_provider === 'github_integrated' ) {
              "https://github.ibm.com/{{services.sample-repo.parameters.owner_id}}/{{services.sample-repo.parameters.repo_name}}";
            } else {
              "https://us-south.git.cloud.ibm.com/{{services.sample-repo.parameters.owner_id}}/{{services.sample-repo.parameters.repo_name}}"
            }
          PIPELINE_REPO: pipeline-repo
          PIPELINE_REPO_BRANCH: >
            $env.branch ? $env.branch : "master"
          TEKTON_CATALOG_REPO: tekton-catalog-repo
          TEKTON_CATALOG_REPO_BRANCH: "master"
          GIT_COMMIT_EVENT_LISTENER_NAME: >
            if ( $env.source_provider === 'githubconsolidated' ) {
              'github-commit';
            } else if ( $env.source_provider === 'gitlab' ) {
              'grit-or-gitlab-commit';
            } else if ( $env.source_provider === 'bitbucketgit' ) {
              'bitbucket-commit';
            } else if ( $env.source_provider === 'github_integrated' ) {
              'github-commit';
            } else {
              'grit-or-gitlab-commit';
            }
        execute: >
          $env.pipeline_type === 'tekton' ? 'manual-run' : true
  webide:
    service_id: orion
  devops-insights:
      service_id: draservicebroker
form:
  pipeline:
    parameters:
      prod-app-name: >
        $env.prodAppName ?
          '{{prodAppName}}' : '{{services.sample-repo.parameters.repo_name}}'
      prod-space: "{{prodSpace}}"
      prod-organization: "{{prodOrganization}}"
      prod-region: "{{prodRegion}}"
      api-key: "{{apiKey}}"
    schema:
      $ref: deploy.json
